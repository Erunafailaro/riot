=====
Views
=====

Riot is tightly integrated with FreeMarker and makes heavy use of its 
ObjectWrapper and TemplateModel API. This allows us to implement features like
:ref:`transparent cache invalidation <transparent-cache-invalidation>` and
:ref:`transparent access <transparent-version-access>` to versioned content.

Macro Libraries
===============

Riot comes with a set of macro libraries that make writing views a lot easier.
The libraries are documented using fmdoc and the generated docs can be found 
here: 

.. todo:: Add fmdoc to build script.   

Template Macros
===============

One extremely useful library is the one imported under the "template" namespace.
These macros allow you to define a base template which contains common mark-up
and so-called blocks, which can be overwritten in child templates.

.. highlight:: ftl

Lets look at a simple example that illustrates the usage::

	<@template.root>
	    <html>
	        <body>
	            <div id="header">
	                <@template.block name="header">
	                    <h1>Welcome</h1>
	                </@template.block>
	            </div>
	            <div id="content">
	                <@template.block name="content">
	                    This is the default content from the root template.
	                </@template.block>
	            </div>
	        </body>
	    </html>
	</@template.root>

In the example above a block called "content" is defined which can be 
overwritten in another file::

	<@template.extend file="default.ftl">
	    <@template.block name="content">
	        Alternative content
	    </@template.block>
	</@template.extend>
	
Utility Classes
===============

Riot automatically exposes some static utility classes so that they can be
used by views. By default the following classes are available:

* :api:`org.springframework.util.StringUtils`
* :api:`org.riotfamily.common.util.FormatUtils`
* :api:`org.riotfamily.common.web.support.ServletUtils`

You can expose your own classes by adding the following lines to your 
:file:`website-servlet.xml`:

.. todo:: Think about adding an annotation. Alternatively use beans.* together with Spring's @Component annotation.  

Accessing Reference Data
========================

The Spring documentation uses the term *reference data* for information added
to the model that is needed by the view in order to render the user interface
(e.g. options for a select-box). 

As such data often comes from the database, Riot provides a convenient way to
invoke finder-methods of ActiveRecords directly within the view:: 

    <#list Countries.findAll() as country>
    	<option>${country.name}</option>
    </#list>
    
If two ActiveRecord classes with the same name exist in different packages
only the first one will be exposed and a warning message will be logged.
In order to access the other (shadowed) class you can write 
``statics["com.example.MyActiveRecord"]`` instead.

In case your reference data doesn't come from an ActiveRecord, it's also 
possible to invoke methods on any Spring-managed bean by writing 
:samp:`beans.{<bean-name>}`.
 
.. admonition:: Behind the scenes

	If you're interested in details on how this works, take a look at the 
	:api:`org.riotfamily.common.hibernate.ActiveRecordClassExposer` docs. 


