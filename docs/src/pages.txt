=====
Pages
=====

Riot uses the concept of *pages* to model the topology of a website. A page is
responsible for two things: First, it maps an URL to a controller. Second, it
provides content to be displayed. 

URL Mapping
===========

Every page has a so-called :term:`path-component` which 
(together with the path-components of its ancestors) is used to construct the 
final URL.

If such an URL is requested, the Spring MVC framework needs to find out
which controller should be used to handle the request. To perform this lookup,
Spring uses the :api:`org.springframework.web.servlet.HandlerMapping` interface.

Riot provides :api:`org.riotfamily.pages.mapping.PageHandlerMapping an implementation` 
of that interface, that looks up a page for the requested URL and returns the
handler set on the page's *PageType*.

Page Types
----------

.. highlight:: xml

A :api:`org.riotfamily.pages.config.PageType` serves multiple purposes. As 
mentioned above, it specifies a handler to use. Besides that, it also imposes
constraints on the structure of the sitemap by defining of what kind of
child-pages are allowed.

Therefore the PageType hierarchy is also referred to as SitemapSchema. In order
to define such a schema, you can use the custom namespace provided by Riot::
   
   <p:schema name="default">
     <p:root-page handler="folderController">
       <p:type name="article" handler="articlePageController" />
     </p:root-page>
   </p:schema>

The example above assigns a handler to the root-page and allows
Riot users to create top-level pages of type *article*.

The *handler*-attribute refers to a Spring-managed bean with the specified id.
Alternatively you may define the handler inline, using the ``p:handler`` tag::

    <p:root-page>
      <p:handler>
        <bean class="org.riotfamily.pages.controller.FolderController" />
      </p:handler>
    </p:root-page>

You can define as many types as you like. As soon as more than one type is
allowed at a certain location, you will see dropdown when you create a new page
via the :term:`back-office`.

System Pages
------------

Virtual Pages
-------------
 

Sites
=====

*Sites* allow you to manage multiple domains within the same application, which is
especially useful for multi-lingual sites.
