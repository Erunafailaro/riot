<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.riotfamily.pages.model" auto-import="false">

	<class name="PageNode" table="riot_page_nodes">
		<cache usage="nonstrict-read-write" region="pages" />
		<id name="id" access="field">
			<generator class="native" />
		</id>

		<!-- We have to use cascade "update" to ensure that nodes are reattached -->
		<many-to-one name="parent" access="field" insert="false" update="false" cascade="save-update"/>

		<list name="childNodes" access="field">
			<cache usage="nonstrict-read-write" region="pages" />	
			<key column="parent" />
			<list-index column="pos" />
			<one-to-many class="PageNode" />
		</list>
		<!-- We have to use cascade "update" to ensure that pages are reattached -->
		<set name="pages" access="field" order-by="creationDate" cascade="save-update">
			<cache usage="nonstrict-read-write" region="pages" />
			<key column="node" />
			<one-to-many class="Page" />
		</set>
		<property name="handlerName" />
		<property name="hidden" />
		<property name="systemNode" />
	</class>

	<class name="Page" table="riot_pages">
		<cache usage="nonstrict-read-write" region="pages" />
		<id name="id" access="field">
			<generator class="native" />
		</id>
		<many-to-one name="site" access="field" />
		<!-- We have to use cascade "update" to ensure getParentPage() can be invoked after an update -->
		<many-to-one name="node" insert="false" update="false" cascade="save-update" />
		<property name="published" />
		<property name="creationDate" />
		<property name="pathComponent" />
		<property name="hidden" />
		<property name="folder" />
		<property name="path" column="`path`" />
		<property name="wildcardInPath" />
		<many-to-one name="pageProperties" cascade="all" />
	</class>
	
	<class name="PageAlias" table="riot_page_aliases">
		<cache usage="nonstrict-read-write" region="pages" />
		<id name="id" access="field">
			<generator class="native" />
		</id>
		<many-to-one name="site" />
        <property name="path" column="`path`" />
		<many-to-one name="page" />
	</class>

	<class name="Site" table="riot_sites" lazy="false">
		<cache usage="nonstrict-read-write" region="pages" />
		<id name="id" access="field">
			<generator class="native" />
		</id>
		<property name="name" unique="true" />
		<property name="enabled" />
		<property name="locale" length="5" />
		<property name="theme" />
		<property name="hostName" />
		<property name="pathPrefix" />
		<property name="position" column="pos" />
		<many-to-one name="masterSite" />
		<set name="derivedSites" inverse="true" lazy="true">
			<key column="masterSite" />
			<one-to-many class="Site" />
		</set>
		<set name="aliases" table="riot_site_aliases" lazy="false">
			<key column="site" />
			<element column="hostName" type="string" />
		</set>
		<many-to-one name="properties" cascade="all" unique="true" />
		<filter name="liveMode" condition="enabled = :published"/>
	</class>
	
	<subclass name="PageProperties" extends="org.riotfamily.components.model.ContentContainer" discriminator-value="PageProperties">
		<one-to-one name="page" class="Page" property-ref="pageProperties" />
	</subclass>
	
	<subclass name="org.riotfamily.pages.model.wrapper.PageWrapper" 
		extends="org.riotfamily.components.model.wrapper.ValueWrapper"
		discriminator-value="page">
	    <join table="riot_page_wrappers">
	    	<key column="id" />
            <many-to-one name="page" class="Page" />
        </join>
	</subclass>
 	
</hibernate-mapping>