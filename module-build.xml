<project name="module" default="usage" xmlns:ivy="antlib:org.apache.ivy.ant">

	<description>
		Build file to be included by all sub-projects (modules). It defines
		common	tasks like compile, jar or clean.
	</description>

	<import file="common.xml" />

	<property name="install.resolver" value="local" />

	<property name="resolve.conf" value="build,test" />

	<!-- Module configuration -->
	<property name="module.name" value="${ant.project.name}" />

	<!-- Module location -->
	<dirname property="module.dir" file="${ant.file}" />

	<basename property="module.dir.name" file="${module.dir}" />

	<!-- Directory where source (and resource) files are located -->
	<property name="module.src.dir" value="src" />

	<!--
	  - Location of the module's META-INF directory - It's okay if the
	  - directory denoted by this property does not exist.
	  -->
	<property name="module.meta-inf.dir" value="META-INF" />

	<!-- Module build directory - artifacts will be placed here -->
	<property name="module.build.dir" value="${build.modules.dir}/${module.name}" />

	<!-- Directory where class files will be created upon compilation -->
	<property name="module.build.classes.dir" value="${module.build.dir}/classes" />

	<!-- Location of the jar artifact published by the module -->
	<property name="module.jar" value="${module.build.dir}/${module.name}.jar" />
	
	<!-- Location of the src artifact published by the module -->
	<property name="module.src.zip" value="${module.build.dir}/${module.name}.src.zip" />

	<!--
	  - Resource files to be included in the jar. By default all files found
	  - the source directory are included except for .java files and Ant's
	  - default excludes.
	  -->
	<patternset id="module.jar.resource.patterns">
		<exclude name="**/*.java" />
	</patternset>

	<target name="usage">
		<fail>This file is only intended for inclusion by sub-projects.</fail>
	</target>

	<target name="-init-module" depends="-configure-ivy">

		<echo>=================================================================</echo>
		<echo>Entering module *${module.name}*</echo>
		<echo>=================================================================</echo>

		<mkdir dir="${module.build.dir}" />

		<ivy:info file="ivy.xml" />

		<!-- Set module.status to the one specified in the ivy.xml unless it is integration -->
		<condition property="module.status" value="${ivy.status}">
			<not><equals arg1="${ivy.status}" arg2="integration" /></not>
		</condition>		

		<!-- If no revision is specified, set module.status to publish.status -->
		<property name="module.status" value="${publish.status}" />

		<!-- Don't replace dynamic revisions if status is 'integration' -->
		<condition property="publish.replacedynamicrev" value="false">
			<equals arg1="${module.status}" arg2="integration" />
		</condition>
		<property name="publish.replacedynamicrev" value="true" />

		<!-- Set module.revision to value from ivy.xml -->
		<property name="module.revision" value="${ivy.revision}" />

		<!-- Set a property if the module has a 'src' configuration -->
		<condition property="module.src-conf.exists">
			<contains string="${ivy.configurations}" substring="src" />
		</condition>
	</target>

	<target name="-check-uptodate">
		<echo>Checking for modified files for ${module.name} in ${module.dir}/${module.src.dir}</echo>
		<uptodate property="module.jar.uptodate" targetfile="${module.jar}">
			<srcfiles dir="." includes="${module.src.dir}/**" />
			<srcfiles dir="." includes="${module.meta-inf.dir}/**" />
			<srcfiles file="ivy.xml" />
		</uptodate>
	</target>
	
	<target name="resolve" depends="-init-module">
		<echo message="Retrieving module dependencies" />
		<ivy:resolve conf="${resolve.conf}" showprogress="false" />
		<ivy:retrieve pattern="${lib.dir}/[artifact].[ext]" />
	</target>
	
	<target name="retrieve-sources" depends="-init-module">
		<echo message="Retrieving sources" />
		<ivy:resolve conf="src" showprogress="false" />
		<ivy:retrieve pattern="${lib.dir}/[artifact].[ext]" />
	</target>

	<target name="report" depends="resolve">
		<ivy:report todir="${build.dir}/reports" graph="false" conf="runtime" />
	</target>

	<!--
	  - Compiles the java code from ${src.dir} into ${classes.dir}.
	  -->
	<target name="compile" depends="resolve" description="Compiles the module">
    	<echo message="Compiling java sources" />
		<mkdir dir="${module.build.classes.dir}" />
		<javac srcdir="${module.src.dir}" destdir="${module.build.classes.dir}"
			source="1.4" target="1.4" deprecation="off" debug="on">
			<classpath refid="classpath" />
		</javac>
    	<copy todir="${module.build.classes.dir}">
	    	<fileset dir="${module.src.dir}">
    			<patternset refid="module.jar.resource.patterns" />
    		</fileset>
    	</copy>
	</target>

	<target name="publish-build" depends="jar,src-zip">
		<delete dir="${build.repo.dir}/${module.name}" />
		<copy file="${module.dir}/ivy.xml" todir="${module.build.dir}" />
		<ivy:publish resolver="build"
			forcedeliver="true" overwrite="true"
			artifactspattern="${build.modules.dir}/[module]/[artifact].[ext]"
			srcivypattern="${build.modules.dir}/[module]/ivy.xml"
			status="${module.status}" pubrevision="${module.revision}"
			replacedynamicrev="${publish.replacedynamicrev}" />
	</target>

	<target name="install" depends="publish-build">
		<ivy:install from="build" to="${install.resolver}"
			organisation="${ivy.organisation}" module="${ivy.module}"
			revision="${module.revision}" overwrite="true" />
	</target>

	<target name="install-if-modified" depends="-check-uptodate" unless="module.jar.uptodate">
		<antcall target="install" />
	</target>
	
	<!--
	  - Creates a jar file ${jar.path} containing all files in ${classes.dir}
	  -->
	<target name="jar" depends="compile"
		description="Creates a jar file containing the compiled classes">
		<echo message="Creating jar file" />

		<!-- Module title that is written to the MANIFEST file -->
		<property name="module.title" value="${module.name}" />

		<!-- Module vendor that is written to the MANIFEST file -->
		<property name="module.vendor" value="${ivy.organisation}" />

		<available file="${module.meta-inf.dir}" property="jar-target" value="-jar-with-meta-inf" />
		<property name="jar-target" value="-jar-without-meta-inf" />
		<antcall target="${jar-target}" />
	</target>

	<target name="-jar-without-meta-inf">
		<jar jarfile="${module.jar}">
			<fileset dir="${module.build.classes.dir}" />
			<manifest>
				<attribute name="Implementation-Title" value="${module.title}" />
			    <attribute name="Implementation-Version" value="${module.revision}" />
			    <attribute name="Implementation-Vendor" value="${module.vendor}" />
			</manifest>
		</jar>
	</target>
	<target name="-jar-with-meta-inf">
		<jar jarfile="${module.jar}">
			<fileset dir="${module.build.classes.dir}" />
			<metainf dir="${module.meta-inf.dir}" />
			<manifest>
				<attribute name="Implementation-Title" value="${module.title}" />
			    <attribute name="Implementation-Version" value="${module.revision}" />
			    <attribute name="Implementation-Vendor" value="${module.vendor}" />
			</manifest>
		</jar>
	</target>

	<!--
	  - Creates a zip file containing all source files
	  -->
	<target name="src-zip" if="module.src-conf.exists" depends="-init-module"
			description="Creates a zip file containing the sources">
		
		<echo message="Creating src-zip" />
		<zip basedir="${module.src.dir}" destfile="${module.src.zip}" />
	</target>

	<target name="collect-xml-schemas">
		<delete dir="${build.dir}/schema/${module.dir.name}" />
		<mkdir dir="${build.dir}/schema/${module.dir.name}" />	
		<copy todir="${build.dir}/schema/${module.dir.name}" flatten="true">
			<fileset dir="${module.src.dir}">
				<include name="**/*.xsd" />
			</fileset>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*.xsd" to="*-${project.version}.xsd" />
			</chainedmapper>
		</copy>
	</target>

	<!--
	  - Removes the module's build directory.
	  -->
	<target name="clean" description="Removes the module's build directory">
		<echo message="Removing the build directory" />
		<delete dir="${module.build.dir}" />
	</target>

</project>
