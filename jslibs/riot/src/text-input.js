var TextInput = {
	create: function(element, pattern, errorMessage, errorElement, errorTag) {
		return new TextInput.Field(element, pattern, errorMessage, errorElement, errorTag);
	}
};

TextInput.Field = Class.create();
TextInput.Field.prototype = {

	initialize: function(element, pattern, errorMessage, errorElement, errorTag) {
		this.element = $(element);		
		
		if (pattern.charAt(0) != '^') {
			pattern = '^' + pattern;
		}
		if (pattern.charAt(pattern.length -1) != '$') {
			pattern = pattern + '$';
		}		
		this.pattern = pattern;		
		this.errorMessage = errorMessage;		
		this.errorElement = errorElement || this.element.id + '-error';		
		this.errorTag = errorTag || 'li';
				
		this.element.onkeydown = this.handleKeyDown.bindAsEventListener(this);
		this.element.onkeypress = this.handleKeyPress.bindAsEventListener(this);
		this.element.onkeyup = this.validate.bindAsEventListener(this);
		this.element.onchange = this.validate.bindAsEventListener(this);
		
		this.validate();
	},
	
	getValue: function() {
		return this.element.value;
	},

	setValue: function(v) {		
		if (this.isValid(v)) {
			this.element.value = v;
		}
	},
	
	isControlKey: function(code) {
		return code == Event.KEY_TAB 
			|| code == Event.KEY_RETURN
			|| code == Event.KEY_LEFT
			|| code == Event.KEY_RIGHT
			|| code == Event.KEY_DELETE
			|| code == Event.KEY_BACKSPACE
			|| code == Event.KEY_ESC
			|| code == 35 //END
			|| code == 36 //HOME
			|| code == 0  //WIN
	},

	isValid: function(v) {
		var value = v || this.element.value;		
		var myregexp = new RegExp(this.pattern);		
		return myregexp.test(value);		
	},
	
	validate: function() {
		if (!this.isValid()) {
			this.handleErrorForInvalidChar();
		}
	},
	
	handleKeyDown: function(e) {
		// NOTE:
		// In handleKeyPress() the code for '.' is 46 which is the
		// same as for the DELETE key. Therefore we store the code
		// generated by the keydown-event, which is 190 for the 
		// dot character and 46 for DELETE.

		this.downCode = e.keyCode ? e.keyCode : e.which;
	},

	handleKeyPress: function(e) {
		if (this.isControlKey(this.downCode)) return true;
		if (e.altKey || e.ctrlKey) return true;
		var code = e.keyCode ? e.keyCode : e.which;
		
		var c = String.fromCharCode(code);
		var myregexp = new RegExp(this.pattern);		
		var valid = myregexp.test(c);
		if (valid) {
			this.handleErrorForValidChar();
		}
		else {
			this.handleErrorForInvalidChar();
		}	
		return valid;
	},
	
	handleErrorForInvalidChar: function() {
		if (!this.errorNode) {
			this.errorNode = document.createElement(this.errorTag);
			var errorText = document.createTextNode(this.errorMessage);
			this.errorNode.appendChild(errorText);
		}		
		document.getElementById(this.errorElement).appendChild(this.errorNode);
	},
	
	handleErrorForValidChar: function() {		
		if (this.errorNode) {
			Element.remove(this.errorNode);
			this.errorNode = null;
		}
	}
	
	
}