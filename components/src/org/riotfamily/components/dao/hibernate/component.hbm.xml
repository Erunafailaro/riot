<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">


<hibernate-mapping package="org.riotfamily.components.model" auto-import="false">

	<class name="ComponentList" table="riot_component_lists">
		<cache usage="nonstrict-read-write" region="components" />
		<id name="id">
			<generator class="native" />
		</id>
		<component name="location">
			<!--
			  - We have to use these short string lengths, as MySQL has a limit of
			  - 1000 bytes for indexes and UTF-8 strings take up to 3 bytes per char:
			  - 66 * 3 + 66 * 3 + 200 * 3 = 996
			  - NOTE: This might be still too long for InnoDB tables ...
			  -->
			<property name="type" column="`type`" length="66" unique-key="component_list_key" />
			<property name="path" column="`path`" length="200" unique-key="component_list_key" />
			<property name="slot" column="slot" length="66" unique-key="component_list_key" />
		</component>
		<many-to-one name="parent" unique-key="component_list_key" />
		<list name="liveContainers" cascade="all">
			<cache usage="nonstrict-read-write" region="components" />
			<key column="live_list" />
			<index column="live_pos" />
			<one-to-many class="ContentContainer" />
		</list>
		<list name="previewContainers" cascade="all">
			<cache usage="nonstrict-read-write" region="components" />
			<key column="preview_list" />
			<index column="preview_pos" />
			<one-to-many class="ContentContainer" />
		</list>
		<property name="dirty" />
		<property name="lastModified" />
		<property name="lastModifiedBy" />
	</class>

	<class name="ContentContainer" table="riot_content_containers" lazy="false" discriminator-value="ContentContainer">
		<cache usage="nonstrict-read-write" region="components" />
		<id name="id">
			<generator class="native" />
		</id>
		<discriminator column="container_type" type="string" />

		<many-to-one name="liveVersion" column="live_version" cascade="all" />
		<many-to-one name="previewVersion" column="preview_version" cascade="all" />

		<subclass name="Component" discriminator-value="Component">
			<property name="type" column="component_type" />
			<many-to-one name="liveList" column="live_list" insert="false" update="false" access="field" />
			<many-to-one name="previewList" column="preview_list" insert="false" update="false" access="field" />
			<set name="childLists" inverse="true" cascade="all">
				<key column="parent" />
				<one-to-many class="ComponentList" />
			</set>
		</subclass>
	</class>

	<class name="Content" table="riot_contents" lazy="false">
		<cache usage="nonstrict-read-write" region="components" />
		<id name="id">
			<generator class="native" />
		</id>
		<map name="wrappers" table="riot_content_values" cascade="all-delete-orphan" lazy="false">
			<cache usage="nonstrict-read-write" region="components" />
			<key column="content" />
			<index column="property" type="string" />
			<many-to-many column="wrapper" class="ValueWrapper" />
		</map>
		<many-to-one name="container" />
		<property name="dirty" />
	</class>
	
	<class name="ValueWrapper" table="riot_value_wrappers" lazy="false">
		<cache usage="nonstrict-read-write" region="components" />
		<id name="id">
			<generator class="native" />
		</id>
		<discriminator column="value_type" type="string" />
		<subclass name="StringWrapper" discriminator-value="string">
			<property name="string" access="field" />
		</subclass>
		<subclass name="BooleanWrapper" discriminator-value="boolean">
			<property name="bit" access="field" />
		</subclass>
		<subclass name="RiotFileWrapper" discriminator-value="file">
			<many-to-one name="file" access="field" fetch="join" cascade="all" />
		</subclass>
		<subclass name="ListWrapper" discriminator-value="list">
			<list name="contentList" access="field" table="riot_value_list_items" cascade="all-delete-orphan" lazy="false">
				<key column="list" />
				<index column="pos" />
				<one-to-many class="ValueWrapper" />
			</list>
		</subclass>
		<subclass name="MapWrapper" discriminator-value="map">
			<map name="contentMap" access="field" table="riot_value_map_entries" cascade="all-delete-orphan" lazy="false">
				<key column="map" />
				<index column="map_key" type="string" />
				<one-to-many class="ValueWrapper" />
			</map>
		</subclass>
	</class>

</hibernate-mapping>
